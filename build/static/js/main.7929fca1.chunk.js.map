{"version":3,"sources":["resources/white_circle.png","createPlanet.js","FinalExport.js","RemoveStar.js","StarVisualisation.js","Import.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreatePlanet","props","useState","resource_percentage","setResourcePercentage","resources","setResources","economy_percentage","setEconomyPercentage","economy","setEconomy","industry_percentage","setIndustryPercentage","industry","setIndustry","science_percentage","setSciencePercentage","science","setScience","shipstrength_percentage","setShipStrengthPercentage","shipstrength","setShipStrength","x_percentage","setXPercentage","x_coord","setX","y_percentage","setYPercentage","y_coord","setY","name","setName","Dialog","open","status","onClose","close","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","Grid","container","spacing","justify","item","style","minWidth","TextField","autoFocus","margin","label","type","fullWidth","onChange","event","target","value","placeholder","Typography","gutterBottom","backgroundColor","padding","borderRadius","border","xs","Slider","newValue","Math","trunc","toFixed","DialogActions","onClick","className","console","log","update","parseFloat","FinalExport","defaultValue","export","toggle","RemoveStar","textAlign","width","display","removal","StarVisualisation","canvasRef","useRef","useEffect","canvas","current","c","getContext","globalAlpha","fillRect","height","init","main","x","y","ref","e","document","querySelector","rect","getBoundingClientRect","xcoord","clientX","left","x_range","ycoord","top","clientY","y_range","Import","import_text","setImport","check","setCheck","window_toggle","importworld","FormControlLabel","control","Checkbox","checked","color","labelPlacement","error","App","setOpen","handleClickOpen","setCanvas","setC","imgs","setImgs","create_image","circle","Image","src","require","onload","drawImage","new_array","i","length","push","xrange","setXRange","yrange","setYRange","updateMap","xvalues","yvalues","k","obj","x_max","max","apply","y_max","x_min","min","stars","setStars","JSON_export","setJSON","view_JSON","setView","imperror","setImpError","remove","toggleRemoval","setRemoval","importToggle","setImportToggle","toggleImport","object","JSON","stringify","new_stars","world","cq","import_data","parse","Object","values","err","star_name","warpgate","custom_star","new_canvas","ctx","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7929fca1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/white_circle.c8ff2c80.png\";","import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport TextField from '@material-ui/core/TextField';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction CreatePlanet(props) {\n    const max_resources = 80;\n    const [resource_percentage,setResourcePercentage] = useState(30);\n    const [resources,setResources] = useState(resource_percentage/100*max_resources)\n    const resourcePercentageChange = (event, newValue) => {\n        setResourcePercentage(newValue);\n        setResources(Math.trunc(resource_percentage/100*max_resources))\n    }\n\n    const max_economy = 50;\n    const [economy_percentage,setEconomyPercentage] = useState(30);\n    const [economy,setEconomy] = useState(economy_percentage/100*max_economy)\n    const economyPercentageChange = (event, newValue) => {\n        setEconomyPercentage(newValue);\n        setEconomy(Math.trunc(economy_percentage/100*max_economy))\n    }\n\n    const max_industry = 80;\n    const [industry_percentage,setIndustryPercentage] = useState(30);\n    const [industry,setIndustry] = useState(industry_percentage/100*max_industry)\n    const industryPercentageChange = (event, newValue) => {\n        setIndustryPercentage(newValue);\n        setIndustry(Math.trunc(industry_percentage/100*max_industry))\n    }\n\n    const max_science = 50;\n    const [science_percentage,setSciencePercentage] = useState(30);\n    const [science,setScience] = useState(science_percentage/100*max_science)\n    const sciencePercentageChange = (event, newValue) => {\n        setSciencePercentage(newValue);\n        setScience(Math.trunc(science_percentage/100*max_science))\n    }\n\n    const max_ship_strength = 30;\n    const [shipstrength_percentage,setShipStrengthPercentage] = useState(30);\n    const [shipstrength,setShipStrength] = useState(shipstrength_percentage/100*max_ship_strength)\n    const shipstrengthPercentageChange = (event, newValue) => {\n        setShipStrengthPercentage(newValue);\n        setShipStrength(Math.trunc(shipstrength_percentage/100*max_ship_strength))\n    }\n\n    const max_coord = 10; //abs(max) is actually 5, but 10 is set here to handle negative numbers\n\n    const [x_percentage,setXPercentage] = useState(50)\n\n    const [x_coord, setX] = useState(x_percentage/100*max_coord-5);\n\n    const XPercentageChange = (event, newValue) => {\n        setXPercentage(newValue);\n        setX((x_percentage/100*max_coord-5).toFixed(2))\n    }\n\n    const [y_percentage,setYPercentage] = useState(50)\n    const [y_coord, setY] = useState(y_percentage/100*max_coord-5);\n    const YPercentageChange = (event, newValue) => {\n        setYPercentage(newValue);\n        setY((y_percentage/100*max_coord-5).toFixed(2))\n    }\n\n    /*// when it first initialises\n    useEffect(() => {\n        //setXPercentage(parseInt((props.x_coord+max_coord/2)/max_coord*100))\n        //setYPercentage(parseInt((props.y_coord+max_coord/2)/max_coord*100))\n    }, []);\n\n    useEffect(() => {\n        //setY((y_percentage/100*max_coord-5).toFixed(2))\n        //setY(y_percentage/100*max_coord-5)\n        console.log(y_percentage)\n\n    }, [y_percentage])*/\n\n    const [name,setName] = useState('')\n\n    const grabInformation = () => {\n        console.log(x_coord,y_coord)\n        props.update(name,parseFloat(x_coord),parseFloat(y_coord),parseFloat(resources),0,parseFloat(economy),parseFloat(industry),parseFloat(science),parseFloat(shipstrength));\n        props.close()\n    }\n\n    return (\n\n        <div>\n            <Dialog open={props.status} onClose={props.close} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Create Star</DialogTitle>\n                <DialogContent>\n                <DialogContentText>\n                    Customise your star by filling in the information below\n                </DialogContentText>\n                <Grid container spacing={5} justify='center'>\n                            <Grid item>\n                                <div style={{minWidth:'170px'}}>  \n                                    <TextField\n                                        autoFocus\n                                        margin=\"dense\"\n                                        label=\"Star Name\"\n                                        type=\"text\"\n                                        fullWidth\n                                        onChange={event => setName(event.target.value)}\n                                        placeholder=\"i.e. Glipglop\"\n                                    />\n                                </div>\n                            </Grid>   \n\n                            <Grid item>\n                                <Typography id=\"continuous-slider\" gutterBottom>\n                                        Resources: <strong>{resources}</strong>\n                                </Typography>\n\n                                <div style={{backgroundColor:'white', padding:'10px', borderRadius:'10%', border:'1px solid #b5b5b5', minWidth:'190px'}}>\n                                    <Grid container spacing={2}>\n                                        <Grid container item xs>\n                                            <Slider value={resource_percentage} onChange={resourcePercentageChange} aria-labelledby=\"continuous-slider\" />\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Grid>  \n                        </Grid>  \n\n                        <Grid container spacing={5} justify='center'>\n                            <Grid item>\n                                <Typography id=\"continuous-slider\" gutterBottom>\n                                        Pre-built Economy: <strong>{economy}</strong>\n                                </Typography>\n\n                                <div style={{backgroundColor:'white', padding:'10px', borderRadius:'10%', border:'1px solid #b5b5b5', minWidth:'190px'}}>\n                                    <Grid container spacing={2}>\n                                        <Grid container item xs>\n                                            <Slider value={economy_percentage} onChange={economyPercentageChange} aria-labelledby=\"continuous-slider\" />\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Grid>   \n\n                            <Grid item>\n                                <Typography id=\"continuous-slider\" gutterBottom>\n                                    Pre-built Industry: <strong>{industry}</strong>\n                                </Typography>\n\n                                <div style={{backgroundColor:'white', padding:'10px', borderRadius:'10%', border:'1px solid #b5b5b5', minWidth:'190px'}}>\n                                    <Grid container spacing={2}>\n                                        <Grid container item xs>\n                                            <Slider value={industry_percentage} onChange={industryPercentageChange} aria-labelledby=\"continuous-slider\" />\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Grid>  \n                        </Grid> \n\n                        <Grid container spacing={5} justify='center'>\n                            <Grid item>\n                                <Typography id=\"continuous-slider\" gutterBottom>\n                                        Pre-built Science: <strong>{science}</strong>\n                                </Typography>\n\n                                <div style={{backgroundColor:'white', padding:'10px', borderRadius:'10%', border:'1px solid #b5b5b5', minWidth:'190px'}}>\n                                    <Grid container spacing={2}>\n                                        <Grid container item xs>\n                                            <Slider value={science_percentage} onChange={sciencePercentageChange} aria-labelledby=\"continuous-slider\" />\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Grid>   \n\n                            <Grid item>\n                                <Typography id=\"continuous-slider\" gutterBottom>\n                                    Ship Strength: <strong>{shipstrength}</strong>\n                                </Typography>\n\n                                <div style={{backgroundColor:'white', padding:'10px', borderRadius:'10%', border:'1px solid #b5b5b5', minWidth:'190px'}}>\n                                    <Grid container spacing={2}>\n                                        <Grid container item xs>\n                                            <Slider value={shipstrength_percentage} onChange={shipstrengthPercentageChange} aria-labelledby=\"continuous-slider\" />\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Grid>  \n                        </Grid> \n\n                        <Grid container spacing={5} justify='center'>\n                            <Grid item>\n                                <Typography id=\"continuous-slider\" gutterBottom>\n                                        X Coordinate: <strong>{x_coord}</strong>\n                                </Typography>\n\n                                <div style={{backgroundColor:'white', padding:'10px', borderRadius:'10%', border:'1px solid #b5b5b5', minWidth:'190px'}}>\n                                    <Grid container spacing={2}>\n                                        <Grid container item xs>\n                                            <Slider value={x_percentage} onChange={XPercentageChange} aria-labelledby=\"continuous-slider\" />\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Grid>   \n\n                            <Grid item>\n                                <Typography id=\"continuous-slider\" gutterBottom>\n                                    Y Coordinate: <strong>{y_coord}</strong>\n                                </Typography>\n\n                                <div style={{backgroundColor:'white', padding:'10px', borderRadius:'10%', border:'1px solid #b5b5b5', minWidth:'190px'}}>\n                                    <Grid container spacing={2}>\n                                        <Grid container item xs>\n                                            <Slider value={y_percentage} onChange={YPercentageChange} aria-labelledby=\"continuous-slider\" />\n                                            {/*<TextField id=\"outlined-basic\" required type=\"number\" min=\"-5\" max=\"5\" placeholder=\"0\" label=\"Y Coordinate\" variant=\"outlined\" />*/}\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Grid>  \n                        </Grid> \n\n                </DialogContent>\n                <DialogActions>\n                    <button onClick={props.close}type=\"button\" className=\"btn btn-warning\">Cancel</button>\n                    <button onClick={grabInformation} type=\"button\" className=\"btn btn-primary\">Add Star</button>\n                </DialogActions>\n            </Dialog>\n\n        </div>\n    );\n}\n\nexport default CreatePlanet;","import React from 'react';\n\nfunction FinalExport(props) {\n    return (\n        <div style={{padding:'10px'}}>\n            <br></br>\n            <textarea id=\"exportString\" defaultValue={props.export}>\n            </textarea>\n            <br></br>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={props.toggle}>Close</button>\n        </div>\n    )\n}\n\nexport default FinalExport","import React, { useState } from 'react';\n\nfunction RemoveStar(props) {\n\n    const [name,setName] = useState('');\n    const deletion = () => {\n        props.removal(name);\n        props.toggle();\n    }\n\n    return (\n        <div style={{padding:'30px',textAlign:'center'}}>\n            <hr style={{width:'80%'}}></hr>\n            <p>Type the name of the star you wish to remove:</p>\n            <input className=\"form-control\" value={name} onChange={event => setName(event.target.value)} type=\"text\" style={{width:'25%',display:'block',margin:'0 auto'}}></input>\n            <br></br>\n            <button type=\"button\" className=\"btn btn-warning\" onClick={props.toggle}>Cancel</button>\n            <button type=\"button\" className=\"btn btn-danger\" onClick={deletion}>Confirm</button>\n        </div>\n    )\n}\n\nexport default RemoveStar;","import React, { useRef, useEffect, useState } from 'react';\nimport CreatePlanet from './createPlanet.js';\n\n/*function draw(ctx) {\n    ctx.arc(0,0,10,0,2*Math.PI);\n    ctx.strokeStyle = \"rgba(255,255,255,1)\";\n    //finally, create the stroke with extra width so it's nice on the eyes\n    ctx.lineWidth = 50;\n    ctx.stroke();\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n}\n\nfunction draw_star(c,x,y) {\n    c.arc(x,y,2,0,2*Math.PI);\n    c.fillStyle = \"white\";\n    c.fill();\n}*/\n\n/*function image_star(c,x,y) {\n    var circle = new Image();\n    circle.src = require('./resources/white_circle.png')\n    circle.onload = function() {\n        console.log(circle)\n        c.drawImage(circle,x,y,5,5)\n    }\n}*/\n\nfunction StarVisualisation(props) {\n    const canvasRef = useRef(null)\n\n    useEffect(() => {\n        const canvas = canvasRef.current\n        const c = canvas.getContext('2d');\n\n        // Drawing the background which hides the star system from full focus\n        c.globalAlpha = 1;\n        c.fillRect(0, 0, c.canvas.width, c.canvas.height)\n        c.globalAlpha = 1;\n\n        props.init(canvas);\n        props.main()\n\n\n    }, [])\n\n    const [x,setX] = useState(0)\n    const [y,setY] = useState(0)\n\n    const coordMap = (canvas) => {\n        \n    }\n\n    const handleClick = (e) => {\n        // initialises canvas variables\n        const canvas = document.querySelector('canvas')\n        const rect = canvas.getBoundingClientRect()\n        \n        // maps coordinates to a casual Neptune's Pride game\n        var xcoord = parseFloat(((e.clientX - rect.left)/canvas.width*props.x_range-props.x_range/2).toFixed(2))\n        var ycoord = parseFloat(((rect.top - e.clientY)/canvas.height*props.y_range+props.y_range/2).toFixed(2))\n\n        // sets adjusted coodinates\n        setX(xcoord)\n        setY(ycoord)\n\n        //console.log(\"x: \" + xcoord + \" y: \" + ycoord)\n\n        //open up the creation tab\n        props.open();\n\n    }\n\n    return(\n        <div style={{textAlign:'center'}}>\n\n            <hr style={{width:'85%'}}></hr>\n\n            < CreatePlanet x_coord={x} y_coord={y} update={props.update} status={props.status} open={props.open} close={props.close}/>\n\n            <canvas width=\"1000px\" height=\"500px\" ref={canvasRef}  onClick={handleClick} />\n            \n        </div>\n    );\n}\n\nexport default StarVisualisation;\n","import React, { useState } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nfunction Import(props) {\n    const [import_text,setImport] = useState('');\n    const [check,setCheck] = useState(false);\n    const handleChange = (event) => {\n        setCheck(event.target.checked);\n    }\n\n    const send_text = () => {\n        props.importworld(import_text,check);\n    }\n\n    return (\n        <div style={{padding:'10px'}}>\n            <br></br>\n            <textarea id=\"exportString\" placeholder=\"Please type your world's JSON information here\" value={import_text} onChange={event => setImport(event.target.value)}>\n            </textarea>\n            <br></br>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={props.window_toggle}>Close</button>\n            <button type=\"button\" className=\"btn btn-info\" onClick={send_text}>Confirm Import</button>\n            <div className=\"row\">\n                <div className=\"offset-5\">\n            <FormControlLabel\n                value=\"start\"\n                control={<Checkbox checked = {check} onChange={handleChange} color=\"primary\" />}\n                label=\"CQProject Import:\"\n                labelPlacement=\"start\"\n            />\n            </div>\n            </div>\n\n\n            {props.error ? <span><br></br> <br></br> <h6>There was an error converting your world. Please try again.</h6></span> : ''}\n        </div>\n    )\n}\n\nexport default Import","import React, { useState } from 'react';\nimport CreatePlanet from './createPlanet.js';\nimport './App.css';\nimport FinalExport from './FinalExport.js';\nimport RemoveStar from './RemoveStar.js';\nimport StarVisualisation from './StarVisualisation.js';\nimport Import from './Import.js';\n\n\nfunction App() {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n      setOpen(true);\n  };\n\n  const handleClose = () => {\n      setOpen(false);\n  };\n\n  const [canvas,setCanvas] = useState(null);\n  const [c,setC] = useState(null);\n  const updateCanvasVars = (new_canvas) => {\n    setCanvas(new_canvas);\n    setC(new_canvas.getContext('2d'))\n\n  }\n  \n  const max_coord = 5;\n\n  const [imgs,setImgs] = useState([]);\n  const create_image = (c,x,y) => {\n    //console.log('Canvas Width: ',canvas.width,'Canvas Height: ',canvas.height)\n    var circle = new Image();\n    circle.src = require('./resources/white_circle.png')\n    circle.onload = function() {\n        c.drawImage(circle,x,y,10,10)\n    }\n    var new_array = []\n    for (var i=0; i < imgs.length; i++) {\n        new_array.push(imgs[i]);\n    }\n    new_array.push(circle);\n    setImgs(new_array);\n  }\n\n  const updateCanvas = () => {\n    for (var i=0; i < stars.length; i++) {\n        //var x_coord = stars[i].x/2.5*canvas.width+canvas.width/2;  \n        //var y_coord = stars[i].y/2.5*canvas.height+canvas.height/2;\n        var x_coord = stars[i].x/max_coord*canvas.width;\n        var y_coord = stars[i].y*60;\n        create_image(c,x_coord,y_coord);\n    }\n  }\n\n  const [xrange,setXRange] = useState(10)\n  const [yrange,setYRange] = useState(10)\n\n  const updateMap = (new_array) => {\n    var xvalues = [];\n    var yvalues = [];\n    // find largest values of x and y\n    for (var k=0; k < new_array.length; k++) {\n      var obj = new_array[k];\n      xvalues.push(parseFloat(obj.x))\n      yvalues.push(parseFloat(obj.y))\n    }\n\n    // find largest and smallest values and assign them\n    var x_max = Math.max.apply(null,xvalues)\n    var y_max = Math.max.apply(null,yvalues)\n    var x_min = Math.min.apply(null,xvalues)\n    var y_min = Math.min.apply(null,yvalues)\n    // find the range for coordinate mapping\n    var y_range = y_max-y_min\n    var x_range = x_max-x_min\n    // fall back plan\n    if (y_range === 0) {\n      y_range = 10\n    }\n    if (x_range === 0) {\n      x_range = 10\n    }\n    setXRange(x_range)\n    setYRange(y_range)\n\n    // update map\n    for (var k=0; k < new_array.length; k++) {\n      var xcoord = new_array[k].x/x_range*canvas.width+canvas.width/2-x_range/4;\n      var ycoord = canvas.height/2-new_array[k].y/y_range*canvas.height-y_range/4;\n      create_image(c,xcoord,ycoord);\n    }\n\n  }\n\n  const [stars, setStars] = useState([\n\n  ]);\n\n  const addStar = (star_name, x_coord, y_coord, resources, warpgate, economy, industry, science, shipstrength) => {\n    var new_stars = [];\n    //go through all the old stars adding them to the new array\n    for (var i=0; i < stars.length; i++) {\n      new_stars.push(stars[i])\n    }\n    // set up an object for the custom star\n    var uid = stars.length;\n    var custom_star = {\"uid\" : uid, \"name\" : star_name, \"x\" : x_coord, \"y\" : y_coord, \"r\" : resources, \"g\" : warpgate,\n                       \"e\" : economy, \"i\" : industry, \"s\" : science, \"st\" : shipstrength}\n    // add it to the new array and update the star system\n    new_stars.push(custom_star);\n\n    // update the canvas\n    updateMap(new_stars)\n    setStars(new_stars);\n  }\n\n  const [JSON_export,setJSON] = useState('');\n  const [view_JSON,setView] = useState(false);\n\n  const exportWorld = () => {\n    var object = {\"stars\" : stars}\n    setJSON(JSON.stringify(object))\n    setView(true)\n  }\n\n  const [imperror,setImpError] = useState(false)\n  const import_world = (world,cq) => {\n    try {\n      setImpError(false);\n      var import_data = JSON.parse(world);\n      var new_array = [];\n\n      // not a CQ import\n      if (!cq) {\n        setStars(import_data.stars)\n        new_array = import_data.stars;\n      } else {\n        // it is a CQ import, do something different\n        new_array = Object.values(import_data)\n        setStars(new_array);\n        }\n\n      updateMap(new_array)\n    }\n    catch (err) {\n      console.log(err)\n      setImpError(true);\n    }\n  }\n\n  const toggleWorld = () => {\n    setView(!view_JSON);\n  }\n\n  const [remove,toggleRemoval] = useState(false);\n  const setRemoval = () => {\n    toggleRemoval(!remove);\n  }\n\n  const deleteStar = (name) => {\n    //go through all the stars and exclude anything with that name\n    var new_stars = [];\n    for (var i=0; i < stars.length; i++) {\n      if (stars[i].name !== name) {\n        new_stars.push(stars[i])\n      }\n    }\n    setStars(new_stars);\n\n    //update stars here?? but stars won't remove so eh.\n\n  }\n\n  const [importToggle,setImportToggle] = useState(false);\n  const toggleImport = () => {\n    setImportToggle(!importToggle);\n\n    if (!importToggle) {\n      setImpError(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n\n      <h1>Neptune's Pride World Customiser</h1>\n\n      <button type=\"button\" className=\"btn btn-success\" onClick={handleClickOpen}>Add Star</button>\n      <button type=\"button\" className=\"btn btn-danger\" onClick={setRemoval}>Remove Star</button>\n      <button type=\"button\" className=\"btn btn-primary\" onClick={exportWorld}>Export World</button>\n      <button type=\"button\" className=\"btn btn-info\" onClick={toggleImport}>Import World</button>\n\n      {view_JSON ? < FinalExport export={JSON_export} toggle={toggleWorld}/> : ''}\n\n      {remove ? < RemoveStar toggle={setRemoval} removal={deleteStar}/> : ''}\n\n      {importToggle ? < Import importworld={import_world} error={imperror} window_toggle={toggleImport}/> : ''}\n\n      < StarVisualisation x_range={xrange} y_range={yrange} update={addStar} status={open} open={handleClickOpen} close={handleClose} stars={stars} init={updateCanvasVars} main={updateCanvas} ctx={c}/>\n\n      <footer>\n        <p>An application by Paul Clarke</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}